// export by github.com/goplus/igop/cmd/qexp

//go:build go1.18
// +build go1.18

package types

import (
	q "github.com/compose-spec/compose-go/types"

	"go/constant"
	"reflect"

	"github.com/goplus/igop"
)

func init() {
	igop.RegisterPackage(&igop.Package{
		Name: "types",
		Path: "github.com/compose-spec/compose-go/types",
		Deps: map[string]string{
			"encoding/json": "json",
			"fmt":           "fmt",
			"github.com/distribution/distribution/v3/reference": "reference",
			"github.com/docker/go-connections/nat":              "nat",
			"github.com/mitchellh/mapstructure":                 "mapstructure",
			"github.com/opencontainers/go-digest":               "digest",
			"golang.org/x/sync/errgroup":                        "errgroup",
			"os":                                                "os",
			"path/filepath":                                     "filepath",
			"runtime":                                           "runtime",
			"sort":                                              "sort",
			"strings":                                           "strings",
			"time":                                              "time",
		},
		Interfaces: map[string]reflect.Type{},
		NamedTypes: map[string]reflect.Type{
			"BlkioConfig":             reflect.TypeOf((*q.BlkioConfig)(nil)).Elem(),
			"BuildConfig":             reflect.TypeOf((*q.BuildConfig)(nil)).Elem(),
			"Config":                  reflect.TypeOf((*q.Config)(nil)).Elem(),
			"ConfigDetails":           reflect.TypeOf((*q.ConfigDetails)(nil)).Elem(),
			"ConfigFile":              reflect.TypeOf((*q.ConfigFile)(nil)).Elem(),
			"ConfigObjConfig":         reflect.TypeOf((*q.ConfigObjConfig)(nil)).Elem(),
			"Configs":                 reflect.TypeOf((*q.Configs)(nil)).Elem(),
			"CredentialSpecConfig":    reflect.TypeOf((*q.CredentialSpecConfig)(nil)).Elem(),
			"DependsOnConfig":         reflect.TypeOf((*q.DependsOnConfig)(nil)).Elem(),
			"DeployConfig":            reflect.TypeOf((*q.DeployConfig)(nil)).Elem(),
			"DeviceRequest":           reflect.TypeOf((*q.DeviceRequest)(nil)).Elem(),
			"DiscreteGenericResource": reflect.TypeOf((*q.DiscreteGenericResource)(nil)).Elem(),
			"Duration":                reflect.TypeOf((*q.Duration)(nil)).Elem(),
			"ExtendsConfig":           reflect.TypeOf((*q.ExtendsConfig)(nil)).Elem(),
			"Extensions":              reflect.TypeOf((*q.Extensions)(nil)).Elem(),
			"External":                reflect.TypeOf((*q.External)(nil)).Elem(),
			"FileObjectConfig":        reflect.TypeOf((*q.FileObjectConfig)(nil)).Elem(),
			"FileReferenceConfig":     reflect.TypeOf((*q.FileReferenceConfig)(nil)).Elem(),
			"GenericResource":         reflect.TypeOf((*q.GenericResource)(nil)).Elem(),
			"HealthCheckConfig":       reflect.TypeOf((*q.HealthCheckConfig)(nil)).Elem(),
			"HealthCheckTest":         reflect.TypeOf((*q.HealthCheckTest)(nil)).Elem(),
			"HostsList":               reflect.TypeOf((*q.HostsList)(nil)).Elem(),
			"IPAMConfig":              reflect.TypeOf((*q.IPAMConfig)(nil)).Elem(),
			"IPAMPool":                reflect.TypeOf((*q.IPAMPool)(nil)).Elem(),
			"Labels":                  reflect.TypeOf((*q.Labels)(nil)).Elem(),
			"LoggingConfig":           reflect.TypeOf((*q.LoggingConfig)(nil)).Elem(),
			"Mapping":                 reflect.TypeOf((*q.Mapping)(nil)).Elem(),
			"MappingWithColon":        reflect.TypeOf((*q.MappingWithColon)(nil)).Elem(),
			"MappingWithEquals":       reflect.TypeOf((*q.MappingWithEquals)(nil)).Elem(),
			"NetworkConfig":           reflect.TypeOf((*q.NetworkConfig)(nil)).Elem(),
			"Networks":                reflect.TypeOf((*q.Networks)(nil)).Elem(),
			"Placement":               reflect.TypeOf((*q.Placement)(nil)).Elem(),
			"PlacementPreferences":    reflect.TypeOf((*q.PlacementPreferences)(nil)).Elem(),
			"Project":                 reflect.TypeOf((*q.Project)(nil)).Elem(),
			"Resource":                reflect.TypeOf((*q.Resource)(nil)).Elem(),
			"Resources":               reflect.TypeOf((*q.Resources)(nil)).Elem(),
			"RestartPolicy":           reflect.TypeOf((*q.RestartPolicy)(nil)).Elem(),
			"SSHConfig":               reflect.TypeOf((*q.SSHConfig)(nil)).Elem(),
			"SSHKey":                  reflect.TypeOf((*q.SSHKey)(nil)).Elem(),
			"SecretConfig":            reflect.TypeOf((*q.SecretConfig)(nil)).Elem(),
			"Secrets":                 reflect.TypeOf((*q.Secrets)(nil)).Elem(),
			"ServiceConfig":           reflect.TypeOf((*q.ServiceConfig)(nil)).Elem(),
			"ServiceConfigObjConfig":  reflect.TypeOf((*q.ServiceConfigObjConfig)(nil)).Elem(),
			"ServiceDependency":       reflect.TypeOf((*q.ServiceDependency)(nil)).Elem(),
			"ServiceFunc":             reflect.TypeOf((*q.ServiceFunc)(nil)).Elem(),
			"ServiceNetworkConfig":    reflect.TypeOf((*q.ServiceNetworkConfig)(nil)).Elem(),
			"ServicePortConfig":       reflect.TypeOf((*q.ServicePortConfig)(nil)).Elem(),
			"ServiceSecretConfig":     reflect.TypeOf((*q.ServiceSecretConfig)(nil)).Elem(),
			"ServiceVolumeBind":       reflect.TypeOf((*q.ServiceVolumeBind)(nil)).Elem(),
			"ServiceVolumeConfig":     reflect.TypeOf((*q.ServiceVolumeConfig)(nil)).Elem(),
			"ServiceVolumeTmpfs":      reflect.TypeOf((*q.ServiceVolumeTmpfs)(nil)).Elem(),
			"ServiceVolumeVolume":     reflect.TypeOf((*q.ServiceVolumeVolume)(nil)).Elem(),
			"Services":                reflect.TypeOf((*q.Services)(nil)).Elem(),
			"ShellCommand":            reflect.TypeOf((*q.ShellCommand)(nil)).Elem(),
			"StringList":              reflect.TypeOf((*q.StringList)(nil)).Elem(),
			"StringOrNumberList":      reflect.TypeOf((*q.StringOrNumberList)(nil)).Elem(),
			"ThrottleDevice":          reflect.TypeOf((*q.ThrottleDevice)(nil)).Elem(),
			"UlimitsConfig":           reflect.TypeOf((*q.UlimitsConfig)(nil)).Elem(),
			"UnitBytes":               reflect.TypeOf((*q.UnitBytes)(nil)).Elem(),
			"UpdateConfig":            reflect.TypeOf((*q.UpdateConfig)(nil)).Elem(),
			"VolumeConfig":            reflect.TypeOf((*q.VolumeConfig)(nil)).Elem(),
			"Volumes":                 reflect.TypeOf((*q.Volumes)(nil)).Elem(),
			"WeightDevice":            reflect.TypeOf((*q.WeightDevice)(nil)).Elem(),
		},
		AliasTypes: map[string]reflect.Type{},
		Vars:       map[string]reflect.Value{},
		Funcs: map[string]reflect.Value{
			"ConvertDurationPtr":   reflect.ValueOf(q.ConvertDurationPtr),
			"NewMapping":           reflect.ValueOf(q.NewMapping),
			"NewMappingWithEquals": reflect.ValueOf(q.NewMappingWithEquals),
			"ParsePortConfig":      reflect.ValueOf(q.ParsePortConfig),
		},
		TypedConsts: map[string]igop.TypedConst{
			"PropagationPrivate":  {reflect.TypeOf(q.PropagationPrivate), constant.MakeString(string(q.PropagationPrivate))},
			"PropagationRPrivate": {reflect.TypeOf(q.PropagationRPrivate), constant.MakeString(string(q.PropagationRPrivate))},
			"PropagationRShared":  {reflect.TypeOf(q.PropagationRShared), constant.MakeString(string(q.PropagationRShared))},
			"PropagationRSlave":   {reflect.TypeOf(q.PropagationRSlave), constant.MakeString(string(q.PropagationRSlave))},
			"PropagationShared":   {reflect.TypeOf(q.PropagationShared), constant.MakeString(string(q.PropagationShared))},
			"PropagationSlave":    {reflect.TypeOf(q.PropagationSlave), constant.MakeString(string(q.PropagationSlave))},
			"SELinuxPrivate":      {reflect.TypeOf(q.SELinuxPrivate), constant.MakeString(string(q.SELinuxPrivate))},
			"SELinuxShared":       {reflect.TypeOf(q.SELinuxShared), constant.MakeString(string(q.SELinuxShared))},
		},
		UntypedConsts: map[string]igop.UntypedConst{
			"ContainerPrefix":                       {"untyped string", constant.MakeString(string(q.ContainerPrefix))},
			"NetworkModeContainerPrefix":            {"untyped string", constant.MakeString(string(q.NetworkModeContainerPrefix))},
			"NetworkModeServicePrefix":              {"untyped string", constant.MakeString(string(q.NetworkModeServicePrefix))},
			"PullPolicyAlways":                      {"untyped string", constant.MakeString(string(q.PullPolicyAlways))},
			"PullPolicyBuild":                       {"untyped string", constant.MakeString(string(q.PullPolicyBuild))},
			"PullPolicyIfNotPresent":                {"untyped string", constant.MakeString(string(q.PullPolicyIfNotPresent))},
			"PullPolicyMissing":                     {"untyped string", constant.MakeString(string(q.PullPolicyMissing))},
			"PullPolicyNever":                       {"untyped string", constant.MakeString(string(q.PullPolicyNever))},
			"RestartPolicyAlways":                   {"untyped string", constant.MakeString(string(q.RestartPolicyAlways))},
			"RestartPolicyNo":                       {"untyped string", constant.MakeString(string(q.RestartPolicyNo))},
			"RestartPolicyOnFailure":                {"untyped string", constant.MakeString(string(q.RestartPolicyOnFailure))},
			"RestartPolicyUnlessStopped":            {"untyped string", constant.MakeString(string(q.RestartPolicyUnlessStopped))},
			"SElinuxShared":                         {"untyped string", constant.MakeString(string(q.SElinuxShared))},
			"SElinuxUnshared":                       {"untyped string", constant.MakeString(string(q.SElinuxUnshared))},
			"ServiceConditionCompletedSuccessfully": {"untyped string", constant.MakeString(string(q.ServiceConditionCompletedSuccessfully))},
			"ServiceConditionHealthy":               {"untyped string", constant.MakeString(string(q.ServiceConditionHealthy))},
			"ServiceConditionStarted":               {"untyped string", constant.MakeString(string(q.ServiceConditionStarted))},
			"ServicePrefix":                         {"untyped string", constant.MakeString(string(q.ServicePrefix))},
			"VolumeTypeBind":                        {"untyped string", constant.MakeString(string(q.VolumeTypeBind))},
			"VolumeTypeNamedPipe":                   {"untyped string", constant.MakeString(string(q.VolumeTypeNamedPipe))},
			"VolumeTypeTmpfs":                       {"untyped string", constant.MakeString(string(q.VolumeTypeTmpfs))},
			"VolumeTypeVolume":                      {"untyped string", constant.MakeString(string(q.VolumeTypeVolume))},
		},
	})
}
