// export by github.com/goplus/igop/cmd/qexp

//go:build go1.18
// +build go1.18

package pflag

import (
	q "github.com/spf13/pflag"

	"go/constant"
	"reflect"

	"github.com/goplus/igop"
)

func init() {
	igop.RegisterPackage(&igop.Package{
		Name: "pflag",
		Path: "github.com/spf13/pflag",
		Deps: map[string]string{
			"bytes":           "bytes",
			"encoding/base64": "base64",
			"encoding/csv":    "csv",
			"encoding/hex":    "hex",
			"errors":          "errors",
			"flag":            "flag",
			"fmt":             "fmt",
			"io":              "io",
			"net":             "net",
			"os":              "os",
			"reflect":         "reflect",
			"sort":            "sort",
			"strconv":         "strconv",
			"strings":         "strings",
			"time":            "time",
		},
		Interfaces: map[string]reflect.Type{
			"SliceValue": reflect.TypeOf((*q.SliceValue)(nil)).Elem(),
			"Value":      reflect.TypeOf((*q.Value)(nil)).Elem(),
		},
		NamedTypes: map[string]reflect.Type{
			"ErrorHandling":        reflect.TypeOf((*q.ErrorHandling)(nil)).Elem(),
			"Flag":                 reflect.TypeOf((*q.Flag)(nil)).Elem(),
			"FlagSet":              reflect.TypeOf((*q.FlagSet)(nil)).Elem(),
			"NormalizedName":       reflect.TypeOf((*q.NormalizedName)(nil)).Elem(),
			"ParseErrorsWhitelist": reflect.TypeOf((*q.ParseErrorsWhitelist)(nil)).Elem(),
		},
		AliasTypes: map[string]reflect.Type{},
		Vars: map[string]reflect.Value{
			"CommandLine": reflect.ValueOf(&q.CommandLine),
			"ErrHelp":     reflect.ValueOf(&q.ErrHelp),
			"Usage":       reflect.ValueOf(&q.Usage),
		},
		Funcs: map[string]reflect.Value{
			"Arg":                reflect.ValueOf(q.Arg),
			"Args":               reflect.ValueOf(q.Args),
			"Bool":               reflect.ValueOf(q.Bool),
			"BoolP":              reflect.ValueOf(q.BoolP),
			"BoolSlice":          reflect.ValueOf(q.BoolSlice),
			"BoolSliceP":         reflect.ValueOf(q.BoolSliceP),
			"BoolSliceVar":       reflect.ValueOf(q.BoolSliceVar),
			"BoolSliceVarP":      reflect.ValueOf(q.BoolSliceVarP),
			"BoolVar":            reflect.ValueOf(q.BoolVar),
			"BoolVarP":           reflect.ValueOf(q.BoolVarP),
			"BytesBase64":        reflect.ValueOf(q.BytesBase64),
			"BytesBase64P":       reflect.ValueOf(q.BytesBase64P),
			"BytesBase64Var":     reflect.ValueOf(q.BytesBase64Var),
			"BytesBase64VarP":    reflect.ValueOf(q.BytesBase64VarP),
			"BytesHex":           reflect.ValueOf(q.BytesHex),
			"BytesHexP":          reflect.ValueOf(q.BytesHexP),
			"BytesHexVar":        reflect.ValueOf(q.BytesHexVar),
			"BytesHexVarP":       reflect.ValueOf(q.BytesHexVarP),
			"Count":              reflect.ValueOf(q.Count),
			"CountP":             reflect.ValueOf(q.CountP),
			"CountVar":           reflect.ValueOf(q.CountVar),
			"CountVarP":          reflect.ValueOf(q.CountVarP),
			"Duration":           reflect.ValueOf(q.Duration),
			"DurationP":          reflect.ValueOf(q.DurationP),
			"DurationSlice":      reflect.ValueOf(q.DurationSlice),
			"DurationSliceP":     reflect.ValueOf(q.DurationSliceP),
			"DurationSliceVar":   reflect.ValueOf(q.DurationSliceVar),
			"DurationSliceVarP":  reflect.ValueOf(q.DurationSliceVarP),
			"DurationVar":        reflect.ValueOf(q.DurationVar),
			"DurationVarP":       reflect.ValueOf(q.DurationVarP),
			"Float32":            reflect.ValueOf(q.Float32),
			"Float32P":           reflect.ValueOf(q.Float32P),
			"Float32Slice":       reflect.ValueOf(q.Float32Slice),
			"Float32SliceP":      reflect.ValueOf(q.Float32SliceP),
			"Float32SliceVar":    reflect.ValueOf(q.Float32SliceVar),
			"Float32SliceVarP":   reflect.ValueOf(q.Float32SliceVarP),
			"Float32Var":         reflect.ValueOf(q.Float32Var),
			"Float32VarP":        reflect.ValueOf(q.Float32VarP),
			"Float64":            reflect.ValueOf(q.Float64),
			"Float64P":           reflect.ValueOf(q.Float64P),
			"Float64Slice":       reflect.ValueOf(q.Float64Slice),
			"Float64SliceP":      reflect.ValueOf(q.Float64SliceP),
			"Float64SliceVar":    reflect.ValueOf(q.Float64SliceVar),
			"Float64SliceVarP":   reflect.ValueOf(q.Float64SliceVarP),
			"Float64Var":         reflect.ValueOf(q.Float64Var),
			"Float64VarP":        reflect.ValueOf(q.Float64VarP),
			"IP":                 reflect.ValueOf(q.IP),
			"IPMask":             reflect.ValueOf(q.IPMask),
			"IPMaskP":            reflect.ValueOf(q.IPMaskP),
			"IPMaskVar":          reflect.ValueOf(q.IPMaskVar),
			"IPMaskVarP":         reflect.ValueOf(q.IPMaskVarP),
			"IPNet":              reflect.ValueOf(q.IPNet),
			"IPNetP":             reflect.ValueOf(q.IPNetP),
			"IPNetVar":           reflect.ValueOf(q.IPNetVar),
			"IPNetVarP":          reflect.ValueOf(q.IPNetVarP),
			"IPP":                reflect.ValueOf(q.IPP),
			"IPSlice":            reflect.ValueOf(q.IPSlice),
			"IPSliceP":           reflect.ValueOf(q.IPSliceP),
			"IPSliceVar":         reflect.ValueOf(q.IPSliceVar),
			"IPSliceVarP":        reflect.ValueOf(q.IPSliceVarP),
			"IPVar":              reflect.ValueOf(q.IPVar),
			"IPVarP":             reflect.ValueOf(q.IPVarP),
			"Int":                reflect.ValueOf(q.Int),
			"Int16":              reflect.ValueOf(q.Int16),
			"Int16P":             reflect.ValueOf(q.Int16P),
			"Int16Var":           reflect.ValueOf(q.Int16Var),
			"Int16VarP":          reflect.ValueOf(q.Int16VarP),
			"Int32":              reflect.ValueOf(q.Int32),
			"Int32P":             reflect.ValueOf(q.Int32P),
			"Int32Slice":         reflect.ValueOf(q.Int32Slice),
			"Int32SliceP":        reflect.ValueOf(q.Int32SliceP),
			"Int32SliceVar":      reflect.ValueOf(q.Int32SliceVar),
			"Int32SliceVarP":     reflect.ValueOf(q.Int32SliceVarP),
			"Int32Var":           reflect.ValueOf(q.Int32Var),
			"Int32VarP":          reflect.ValueOf(q.Int32VarP),
			"Int64":              reflect.ValueOf(q.Int64),
			"Int64P":             reflect.ValueOf(q.Int64P),
			"Int64Slice":         reflect.ValueOf(q.Int64Slice),
			"Int64SliceP":        reflect.ValueOf(q.Int64SliceP),
			"Int64SliceVar":      reflect.ValueOf(q.Int64SliceVar),
			"Int64SliceVarP":     reflect.ValueOf(q.Int64SliceVarP),
			"Int64Var":           reflect.ValueOf(q.Int64Var),
			"Int64VarP":          reflect.ValueOf(q.Int64VarP),
			"Int8":               reflect.ValueOf(q.Int8),
			"Int8P":              reflect.ValueOf(q.Int8P),
			"Int8Var":            reflect.ValueOf(q.Int8Var),
			"Int8VarP":           reflect.ValueOf(q.Int8VarP),
			"IntP":               reflect.ValueOf(q.IntP),
			"IntSlice":           reflect.ValueOf(q.IntSlice),
			"IntSliceP":          reflect.ValueOf(q.IntSliceP),
			"IntSliceVar":        reflect.ValueOf(q.IntSliceVar),
			"IntSliceVarP":       reflect.ValueOf(q.IntSliceVarP),
			"IntVar":             reflect.ValueOf(q.IntVar),
			"IntVarP":            reflect.ValueOf(q.IntVarP),
			"Lookup":             reflect.ValueOf(q.Lookup),
			"NArg":               reflect.ValueOf(q.NArg),
			"NFlag":              reflect.ValueOf(q.NFlag),
			"NewFlagSet":         reflect.ValueOf(q.NewFlagSet),
			"PFlagFromGoFlag":    reflect.ValueOf(q.PFlagFromGoFlag),
			"Parse":              reflect.ValueOf(q.Parse),
			"ParseAll":           reflect.ValueOf(q.ParseAll),
			"ParseIPv4Mask":      reflect.ValueOf(q.ParseIPv4Mask),
			"Parsed":             reflect.ValueOf(q.Parsed),
			"PrintDefaults":      reflect.ValueOf(q.PrintDefaults),
			"Set":                reflect.ValueOf(q.Set),
			"SetInterspersed":    reflect.ValueOf(q.SetInterspersed),
			"ShorthandLookup":    reflect.ValueOf(q.ShorthandLookup),
			"String":             reflect.ValueOf(q.String),
			"StringArray":        reflect.ValueOf(q.StringArray),
			"StringArrayP":       reflect.ValueOf(q.StringArrayP),
			"StringArrayVar":     reflect.ValueOf(q.StringArrayVar),
			"StringArrayVarP":    reflect.ValueOf(q.StringArrayVarP),
			"StringP":            reflect.ValueOf(q.StringP),
			"StringSlice":        reflect.ValueOf(q.StringSlice),
			"StringSliceP":       reflect.ValueOf(q.StringSliceP),
			"StringSliceVar":     reflect.ValueOf(q.StringSliceVar),
			"StringSliceVarP":    reflect.ValueOf(q.StringSliceVarP),
			"StringToInt":        reflect.ValueOf(q.StringToInt),
			"StringToInt64":      reflect.ValueOf(q.StringToInt64),
			"StringToInt64P":     reflect.ValueOf(q.StringToInt64P),
			"StringToInt64Var":   reflect.ValueOf(q.StringToInt64Var),
			"StringToInt64VarP":  reflect.ValueOf(q.StringToInt64VarP),
			"StringToIntP":       reflect.ValueOf(q.StringToIntP),
			"StringToIntVar":     reflect.ValueOf(q.StringToIntVar),
			"StringToIntVarP":    reflect.ValueOf(q.StringToIntVarP),
			"StringToString":     reflect.ValueOf(q.StringToString),
			"StringToStringP":    reflect.ValueOf(q.StringToStringP),
			"StringToStringVar":  reflect.ValueOf(q.StringToStringVar),
			"StringToStringVarP": reflect.ValueOf(q.StringToStringVarP),
			"StringVar":          reflect.ValueOf(q.StringVar),
			"StringVarP":         reflect.ValueOf(q.StringVarP),
			"Uint":               reflect.ValueOf(q.Uint),
			"Uint16":             reflect.ValueOf(q.Uint16),
			"Uint16P":            reflect.ValueOf(q.Uint16P),
			"Uint16Var":          reflect.ValueOf(q.Uint16Var),
			"Uint16VarP":         reflect.ValueOf(q.Uint16VarP),
			"Uint32":             reflect.ValueOf(q.Uint32),
			"Uint32P":            reflect.ValueOf(q.Uint32P),
			"Uint32Var":          reflect.ValueOf(q.Uint32Var),
			"Uint32VarP":         reflect.ValueOf(q.Uint32VarP),
			"Uint64":             reflect.ValueOf(q.Uint64),
			"Uint64P":            reflect.ValueOf(q.Uint64P),
			"Uint64Var":          reflect.ValueOf(q.Uint64Var),
			"Uint64VarP":         reflect.ValueOf(q.Uint64VarP),
			"Uint8":              reflect.ValueOf(q.Uint8),
			"Uint8P":             reflect.ValueOf(q.Uint8P),
			"Uint8Var":           reflect.ValueOf(q.Uint8Var),
			"Uint8VarP":          reflect.ValueOf(q.Uint8VarP),
			"UintP":              reflect.ValueOf(q.UintP),
			"UintSlice":          reflect.ValueOf(q.UintSlice),
			"UintSliceP":         reflect.ValueOf(q.UintSliceP),
			"UintSliceVar":       reflect.ValueOf(q.UintSliceVar),
			"UintSliceVarP":      reflect.ValueOf(q.UintSliceVarP),
			"UintVar":            reflect.ValueOf(q.UintVar),
			"UintVarP":           reflect.ValueOf(q.UintVarP),
			"UnquoteUsage":       reflect.ValueOf(q.UnquoteUsage),
			"Var":                reflect.ValueOf(q.Var),
			"VarP":               reflect.ValueOf(q.VarP),
			"Visit":              reflect.ValueOf(q.Visit),
			"VisitAll":           reflect.ValueOf(q.VisitAll),
		},
		TypedConsts: map[string]igop.TypedConst{
			"ContinueOnError": {reflect.TypeOf(q.ContinueOnError), constant.MakeInt64(int64(q.ContinueOnError))},
			"ExitOnError":     {reflect.TypeOf(q.ExitOnError), constant.MakeInt64(int64(q.ExitOnError))},
			"PanicOnError":    {reflect.TypeOf(q.PanicOnError), constant.MakeInt64(int64(q.PanicOnError))},
		},
		UntypedConsts: map[string]igop.UntypedConst{},
	})
}
